{"ast":null,"code":"import { ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, UPDATE_CONTACT, FILTER_CONTACT, CLEAR_FILTER, CLEAR_CURRENT, CONTACT_ERROR } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case UPDATE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact)\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact.id !== action.payload)\n      };\n\n    case ADD_CONTACT:\n      return { ...state,\n        contacts: [...state.contacts, action.payload]\n      };\n\n    case FILTER_CONTACT:\n      return { ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    case CONTACT_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/abhishektripathi/Documents/React_by_Brad/contact-keeper/client/src/context/contact/contactReducer.js"],"names":["ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","UPDATE_CONTACT","FILTER_CONTACT","CLEAR_FILTER","CLEAR_CURRENT","CONTACT_ERROR","state","action","type","contacts","map","contact","id","payload","current","filter","filtered","regex","RegExp","name","match","email","error"],"mappings":"AAAA,SACIA,WADJ,EAEIC,cAFJ,EAGIC,WAHJ,EAIIC,cAJJ,EAKIC,cALJ,EAMIC,YANJ,EAOIC,aAPJ,EAQIC,aARJ,QASO,UATP;AAYA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,cAAL;AACI,aAAQ,EACJ,GAAGK,KADC;AAEJG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeC,GAAf,CAAmBC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeL,MAAM,CAACM,OAAP,CAAeD,EAA9B,GAAmCL,MAAM,CAACM,OAA1C,GAAoDF,OAAlF;AAFN,OAAR;;AAIJ,SAAKX,WAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHQ,QAAAA,OAAO,EAAEP,MAAM,CAACM;AAFb,OAAP;;AAIJ,SAAKT,aAAL;AACI,aAAO,EACH,GAAGE,KADA;AAEHQ,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAIJ,SAAKf,cAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeM,MAAf,CAAuBJ,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeL,MAAM,CAACM,OAAzD;AAFP,OAAP;;AAIJ,SAAKf,WAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHG,QAAAA,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAV,EAAoBF,MAAM,CAACM,OAA3B;AAFP,OAAP;;AAIJ,SAAKX,cAAL;AACI,aAAO,EACH,GAAGI,KADA;AAEHU,QAAAA,QAAQ,EAAEV,KAAK,CAACG,QAAN,CAAeM,MAAf,CAAsBJ,OAAO,IAAI;AACvC,gBAAMM,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEX,MAAM,CAACM,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOF,OAAO,CAACQ,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BN,OAAO,CAACU,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACH,SAHS;AAFP,OAAP;;AAOJ,SAAKd,YAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHU,QAAAA,QAAQ,EAAE;AAFP,OAAP;;AAIJ,SAAKX,aAAL;AACI,aAAO,EACH,GAAGC,KADA;AAEHgB,QAAAA,KAAK,EAAEf,MAAM,CAACM;AAFX,OAAP;;AAIJ;AACI,aAAOP,KAAP;AA7CR;AA+CH,CAhDD","sourcesContent":["import {\n    ADD_CONTACT,\n    DELETE_CONTACT,\n    SET_CURRENT,\n    UPDATE_CONTACT,\n    FILTER_CONTACT,\n    CLEAR_FILTER,\n    CLEAR_CURRENT,\n    CONTACT_ERROR\n} from '../types';\n\n\nexport default (state, action) => {\n    switch (action.type) {\n        case UPDATE_CONTACT:\n            return ({\n                ...state,\n                contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact)\n            })\n        case SET_CURRENT:\n            return {\n                ...state,\n                current: action.payload\n            }\n        case CLEAR_CURRENT:\n            return {\n                ...state,\n                current: null\n            }\n        case DELETE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.filter((contact) => contact.id !== action.payload)\n            }\n        case ADD_CONTACT:\n            return {\n                ...state,\n                contacts: [...state.contacts, action.payload]\n            }\n        case FILTER_CONTACT:\n            return {\n                ...state,\n                filtered: state.contacts.filter(contact => {\n                    const regex = new RegExp(`${action.payload}`, 'gi')\n                    return contact.name.match(regex) || contact.email.match(regex);\n                })\n            }\n        case CLEAR_FILTER:\n            return {\n                ...state,\n                filtered: null\n            }\n        case CONTACT_ERROR:\n            return {\n                ...state,\n                error: action.payload\n            }\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}